# COM3505 Lab Assessment 1

# Demo Video Link
https://youtube.com/shorts/t2Mcnd7UsY4?feature=share

# Task
The task for Lab Assessment 1 was to "build and document a device which gives a visual indication of the stages involved in provisioning and update". We were expected to use LEDs to show the different stages of the processes at a given time. We also were expected to allow OTA updates once a button on the breadboard had been pressed. 

# Our Solution
In our solution, we created a breadboard which contained three LED's one red, one yellow and one green. These were all connected to a resistor and we incorporated the use of a button for when the ESP should perform an OTA update. Our ESP32 was coded to act as a wireless access point where you can connect your smartphone/ laptop to it and then scan for nearby networks and connect to them. If a network is password protected then it will prompt you for a password before connecting. Once the ESP32 has been connected to a wifi network of your choice you could then press the button and this could call a function called performOTAUpdate() which would start an OTA update.

# Libraries Used
* WiFi.h
* WebServer.h
* HTTPClient.h
* Update.h 

# Hardware
We constructed our hardware based on the design in the second hardware lab for the 3LEDs. We used the same GPIO pins by setting the red LED to GPIO 6, the yellow LED to GPIO 9, the green LED to GPIO 12 and the button to GPIO 5. Each LED was connected by the anode to the ESP and the cathode to a resistor. You can see photos of what this looks like in the images folder. 

# setup()
The setup function of our code initializes the ESP32 and starts the access point, web server and button handling. It configures the GPIO pins as explained in the hardware section above.

# loop()
The loop function handles the incoming client requests and then checks for button presses to see if an OTA update is needed.

# Wifi provisioning
We performed wifi provisioning in a similar way to what was done in Ex9 of the solutions provided. We first set up the ESP32 as a wifi access point to which I could connect my smartphone to and then we used WiFi.scanNetworks() to show a list of all the possible networks which the ESP32 could connect to. From this, we coded the option for a user to select a network they wished to join and if this network was password protected then they would be prompted to input a password before the ESP32 connects to the network. This process is shown via screenshots in the Images folder. We also make use of LEDs to show the different stages of this. Initially, the red LED is on when the ESP is not connected to any wifi networks but when a connection is successfully made to a network the red LED turns off and the green one turns on for 10 seconds to show success.  

# handleRoot()
This function displays a list of all the available wifi networks the ESP32 can connect to. This function allows the ESP32 to connect to a network and displays an HTML page containing a list of all these networks, whether they are password protected or not, and a connect link for each one. This function is used in wifi provisioning.

# handleConnect()
This function handles a connection to a wifi network. If a password is needed then it prompts the user to enter a password before connecting. The function then attempts to connect to the network. The connection status is green if a connection is made which is shown on the green LED.

# handleNotFound()
This displays a 404 error when the page is not found. The red LED will remain on until a successful connection to a network so there was no need to make the red LED turn on here as it should already be on.

# OTA (Over the Air)
We performed OTA updates when the button is pressed by calling a function named performOTAUpdate(). This function works by checking for the latest firmware version from a server which in my case was my laptop. It compares the latest firmware version with the current one and if a newer version is available it then downloads the new firmware and updates the ESP32. We provide visual LED feedback with this by turning on the yellow LED when the process begins and then we either turn the green LED on if the OTA update has been successful or the red LED on if there has been a problem.
