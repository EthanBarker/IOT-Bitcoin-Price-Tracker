# COM3505 Lab Assessment 2
This is the .readme file for COM3505 LA2. For my project I have chosen to implement two new screens for the unPhone. The first of these is a Bitcoin Price tracker which can be used to check the price of Bitcoin at intervals of every second, 10 seconds, 30 seconds, 1 minute, 1 hour and 24 hours. This page also shows the user an up arrow or down arrow depending on if the price is increasing or decreasing. On top of this, we also coloured the text red or green to show a decreasing price or increasing price respectfully. The second screen we implemented was the Heads or Tails game which is based upon pure luck (like crypto seems to be). This was a simple screen which implemented a game where a user is prompted to choose between Heads or Tails. If they make the correct choice they gain a point and if they make the wrong choice they lose a life. This game goes on until a user loses all of their lives then the game will reset. On top of this, we also implemented a wifi screen where a user can select any open network without a password and connect to it. Optionally, the user can connect to password-protected networks by adding the SSID and password to the file "private.h". We began making this project by using code provided by the unPhone library example named "everything". Our addition to this code provided was the three extra screens and their functionality. These screens are named "Wifi", "Bitcoin" and "Heads or Tails".

# Demo Link

# Libraries & API's Used 
* WiFiMulti.h
* Adafruit_EPD.h
* unPhone.h
* WiFi.h
* HTTPClient.h 
* ArduinoJson.h 

# The unPhone & Hardware
For this LA2 project I used the unPhone. This device is a mobile phone alterntive offered by the University of Sheffield. 

# Design 
I designed my project by first taking a look at the unPhone examples provided in the library. I found that the everything example best suited me and provided me with a good background of some examples that the unPhone could do. I noted in the course notes under Chapter 11 there was information about how to add pages so this is where I began. I imagined that I would want to add a few new pages to the existing code so I learnt how do to this. The first page we created was the wifi page as I wanted to connect my unPhone to the internet for it receives bitcoin price data. I took inspiration from the LA1 assignment in scanning for networks that the unPhone can connect to and displaying them in a list on the unPhone screen. From here a user can connect to any network that does not need a password. If a user wants to connect to a password-protected network they will need to manually add the SSID and password to "private.h". The second page we designed was the Bitcoin price page and we imagined that this would simply display the price of Bitcoin at the top of the page using the Coinbase API. We also wanted the user to be able to change the refresh rate for how often the price updates. Finally, the last page we thought of was a simple Heads vs Tails page which was an example of how to store data on the unPhone through a fun game. 

# Config page


# Wifi page
The Wifi page was designed so that a user could easily connect to open networks without the need for them to have any coding experience. I only designed this feature to be able to connect to open networks without a password as of the complexity needed to implement a keyboard. I thought since we had done something like this in LA1 then there wasnt much point doing it again for LA2. Despite this if I had more time for this module and less commitments to other modules then I would have added the ability to connect to password protected networks. This screen represents a Wifi UI element which was one class which contained multiple methods to carry our actions such as drawing the user interface and finding nearby networks.

The methods for this class were:
* draw()
* handleTouch(long x, long y)
* runEachTurn()
* scanNetworks()
* displayNetworks()
* initWiFi()
* connectToNetwork(String networkName)

# Bitcoin page
The Bitcoin Price page is designed as a real-time Bitcoin price tracker. There exists one class for this element which contains several public methods to draw the user interface, handle touch events, update the Bitcoin price and display this price in the correct format.  

The methods for this class are:
* draw() : This method draws the Bitcoin Price user interface onto the screen of the unPhone. This includes parts of the element such as the Bitcoin Price label or the "Back to Menu" button. Note this is not the logic for what happens when you press these buttons, this code only is for the display. 
* updateBitcoinPrice() : This method is responsible for updating the price of Bitcoin by making an HTTP GET request to the Coinbase API. This is a public API so no API key was needed for this project. 
* updateAndDrawPrice() : The updateAndDrawPrice function is also responsible for displaying the Bitcoin Price and display on the unPhones screen. This function is called inside of the draw function.
* handleTouch(long x, long y) : This method handles all of the touch events that can happen on the Bitcoin screen such as a user wanting to go back to the main page or the user pressing one of the 6 buttons provided to change the refresh rate. 
* runEachTurn() : This method updates the Bitcoin price at a frequency at the current refresh rate setting
* showRefreshRateChangeMessage() : This method shows a message on the screen when the refresh rate is updated so that the user can see it has changed.
* buzzTimes(int times) : This method causes the unPhone to vibrate a set number of times. This is done once when the first button is pressed, twice for the second button and up to 6 times for all buttons. This is so users can sense by the vibration that they have changed refresh mode.

# Heads or Tails page
The Heads or Tails page was designed to be a simple game where the user has to choose between Heads or Tails for a coinflip event. The user has 3 lives and gains a point for every correct choice but loses a life for every incorrect choice. For this there also exsisted a single class which extends the UIElement class. This class similar to that of the class above contained methods for drawing the user interface, touch events and playing the game.

The methods for this class are: 
* draw() : As before the draw class handles all of the code for drawing the user interface. This includes the score, the all time high score, the amount of lives and the buttons to play the game. 
* handleTouch(long x, long y) : As before the handleTouch class controls the touch events for the game mainly the two buttons we use to represent heads or tails. This also contains the code to navigate back to the main menu. 
* runEachTurn() : This method was required as an extension of the UIElement class but did not do anything so we kept it empty. 
* playGame(bool heads) : This method plays a round of the game. It flips a coin and compares the result to the player's choice, heads or tails. If the guess is correct, the player's score is increased. If the guess is incorrect, the player loses a life. This repeats until the user has no lives left.
* buzz() : As before this makes the unPhone vibrate 3 times.

# Testing

# Self Assessment and Conclusions


