# COM3505 Lab Assessment 2
This is the .readme file for COM3505 LA2. For my project I have chosen to implement two new screens for the unPhone. The first of these is a Bitcoin Price tracker which can be used to check the price of Bitcoin at intervals of every second, 10 seconds, 30 seconds, 1 minute, 1 hour and 24 hours. This page also shows the user an up arrow or down arrow depending on if the price is increasing or decreasing. On top of this, we also coloured the text red or green to show a decreasing price or increasing price respectfully. The second screen we implemented was the Heads or Tails game which is based upon pure luck (like crypto seems to be). This was a simple screen which implemented a game where a user is prompted to choose between Heads or Tails. If they make the correct choice they gain a point and if they make the wrong choice they lose a life. This game goes on until a user loses all of their lives then the game will reset. On top of this, we also implemented a wifi screen where a user can select any open network without a password and connect to it. Optionally, the user can connect to password-protected networks by adding the SSID and password to the file "private.h". We began making this project by using code provided by the unPhone library example named "everything". Our addition to this code provided was the three extra screens and their functionality. These screens are named "Wifi", "Bitcoin" and "Heads or Tails".

# Demo Link
https://www.youtube.com/watch?v=mSri_mZRCyw

# Libraries & API's Used 
* WiFiMulti.h
* Adafruit_EPD.h
* unPhone.h
* WiFi.h
* HTTPClient.h 
* ArduinoJson.h 

# The unPhone
For this LA2 project, I used the unPhone. This device is a mobile phone alternative offered by the University of Sheffield. At the start of the project, we were given the unPhone to assemble.  The unPhone was simple to put together as it only consisted of a small number of parts. We made use of the vibration motor, USB C socket, on/off slide switch, touchscreen and battery. 

Here are the steps we took to put the unPhone together:

* Step 1: Lay down all of the parts on a table
![Step 1](LA2/Images/All_Parts.png)

* Step 2: Insert the printed circuit board into the front of the unPhone case. The screen should be visible on the other side and all buttons should fit in the slots provided. There could be a problem where the holes need to be made bigger but this was not the case for my project.
![Step 1](LA2/Images/Step_2.png)

* Step 2: Attach the battery to the printed circuit board. You also can use this bit of plastic to hold it into place.
![Step 2](LA2/Images/Step_3.png)

* Step 3: Cover the unPhone with the rest of the case and screw in the screws to hold the unPhone together.
![Step 3](LA2/Images/Step_4.png)


# Design 
I designed my project by first taking a look at the unPhone examples provided in the library. I found that the everything example best suited me and provided me with a good background of some examples that the unPhone could do. I noted in the course notes under Chapter 11 there was information about how to add pages so this is where I began. I imagined that I would want to add a few new pages to the existing code so I learnt how do to this. The first page we created was the wifi page as I wanted to connect my unPhone to the internet so it receives bitcoin price data. I took inspiration from the LA1 assignment in scanning for networks that the unPhone can connect to and displaying them in a list on the unPhone screen. From here a user can connect to any network that does not need a password. If a user wants to connect to a password-protected network they will need to manually add the SSID and password to "private.h". The second page we designed was the Bitcoin price page and we imagined that this would simply display the price of Bitcoin at the top of the page using the Coinbase API. We also wanted the user to be able to change the refresh rate for how often the price updates. Finally, the last page we thought of was a simple Heads vs Tails page which was an example of how to store data on the unPhone through a fun game. 

# Config page
The config page was directly taken from the unPhone library. We however did adapt the code for it to look a bit different and not display as much as originally implemented. We displayed on this page the MAC address, IP address and Firmware. 

![Config page](LA2/Images/Config_Screen.png)

The key methods for this page were:
* draw() : The draw method is responsible for showing information onto the unPhone display. It shows information such as the MAC address, IP address and Firmware.
* handleTouch(long x, long y) : This method is responsible for any touch events that occur. It will return a boolean value of True or False depending on if the button is pressed.
* runEachTurn() : This method is empty as no tasks occur during the config page.

The code for this can be found in unPhoneUI0.h and unPhoneUI0.cpp

# Wifi page
The Wifi page was designed so that a user could easily connect to open networks without the need for them to have any coding experience. I only designed this feature to be able to connect to open networks without a password as of the complexity needed to implement a keyboard. I thought since we had done something like this in LA1 then there wasn't much point doing it again for LA2. Despite this, if I had more time for this module and fewer commitments to other modules then I would have added the ability to connect to password-protected networks. This screen represents a Wifi UI element which was one class which contained multiple methods to carry out our actions such as drawing the user interface and finding nearby networks.

![Wifi page](LA2/Images/Nearby_Networks.png)

The methods for this class were:
* draw() : This method creates the user interface for the unPhones wifi page. It begins by scanning all available networks that the unPhone can connect to and displays this information. It also displays the back button at the bottom of the page.
* handleTouch(long x, long y) : This method manages all touch events for this page. The most important one of these is the ability to press on a network and connect to it. 
* runEachTurn() : This method is empty for this case.
* scanNetworks() : This method scans for available networks and stores the names in a vector.
* displayNetworks() : This method displays the names of the scanned WiFi networks on the screen. This method is called in the draw ()function.
* initWiFi() : This method prepares the WiFi module for scanning. It sets the WiFi to station mode and disconnects from any previous network. This was needed as the unPhone automatically connected to my home wifi. 
* connectToNetwork(String networkName) : This method connects the unPhone to a desired network. Note this network must not be password protected. 

The code for this can be found in unPhoneUI0.h and unPhoneUI0.cpp

# Bitcoin page
The Bitcoin Price page is designed as a real-time Bitcoin price tracker. There exists one class for this element which contains several public methods to draw the user interface, handle touch events, update the Bitcoin price and display this price in the correct format.  

![Bitcoin up](LA2/Images/Bitcoin_Up.png)
![Bitcoin down](LA2/Images/Bitcoin_Down.png)

The methods for this class are:
* draw() : This method draws the Bitcoin Price user interface onto the screen of the unPhone. This includes parts of the elements such as the Bitcoin Price label or the "Back to Menu" button. Note this is not the logic for what happens when you press these buttons, this code only is for the display. 
* updateBitcoinPrice() : This method is responsible for updating the price of Bitcoin by making an HTTP GET request to the Coinbase API. This is a public API so no API key was needed for this project. 
* updateAndDrawPrice() : The updateAndDrawPrice function is also responsible for displaying the Bitcoin Price and display on the unPhones screen. This function is called inside of the draw function.
* handleTouch(long x, long y) : This method handles all of the touch events that can happen on the Bitcoin screen such as a user wanting to go back to the main page or the user pressing one of the 6 buttons provided to change the refresh rate. 
* runEachTurn() : This method updates the Bitcoin price at a frequency at the current refresh rate setting
* showRefreshRateChangeMessage() : This method shows a message on the screen when the refresh rate is updated so that the user can see it has changed.
* buzzTimes(int times) : This method causes the unPhone to vibrate a set number of times. This is done once when the first button is pressed, twice for the second button and up to 6 times for all buttons. This is so users can sense by the vibration that they have changed refresh mode.

The code for this can be found in unPhoneUI0.h and unPhoneUI0.cpp

# Heads or Tails page
The Heads or Tails page was designed to be a simple game where the user has to choose between Heads or Tails for a coinflip event. The user has 3 lives and gains a point for every correct choice but loses a life for every incorrect choice. For this there also existed a single class which extends the UIElement class. This class similar to that of the class above contained methods for drawing the user interface, touch events and playing the game.

![Heads or Tails](LA2/Images/Heads_or_Tails_Game.png)

The methods for this class are: 
* draw() : As before the draw class handles all of the code for drawing the user interface. This includes the score, the all-time high score, the number of lives and the buttons to play the game. 
* handleTouch(long x, long y) : As before the handleTouch class controls the touch events for the game mainly the two buttons we use to represent heads or tails. This also contains the code to navigate back to the main menu. 
* runEachTurn() : This method was required as an extension of the UIElement class but did not do anything so we kept it empty. 
* playGame(bool heads) : This method plays a round of the game. It flips a coin and compares the result to the player's choice, heads or tails. If the guess is correct, the player's score is increased. If the guess is incorrect, the player loses a life. This repeats until the user has no lives left.
* buzz() : As before this makes the unPhone vibrate 3 times.

The code for this can be found in unPhoneUI0.h and unPhoneUI0.cpp

# Testing
When it came to testing my LA2 assignment I opted for manual testing. This involved me uploading my code to the unPhone and seeing if it does what I wanted it to do. I saw on the config page that the unPhone had connected successfully to the wifi as this information is displayed. I saw that the config page worked fine with all pages being accessible. 

The wifi page managed to scan and display nearby networks. We tested this by taking the unPhone to a different set of locations to see if it could pick up networks wherever it was located. We tested this at my university flat, my friends house and my parents home. The unPhone always picked up nearby networks in the area.

The Bitcoin page displayed the price of Bitcoin in green if the price was going up, white if no change and red if the price is going down. I could see the arrows were clearly working too showing a price increase/ decrease. I noticed that the refresh buttons all work and we tested this whilst using a stop watch to show that the first few buttons were working fine. I did however not test this for the 24h feature. I found that after a while of tracking the price the unPhone would reset. I thought that this would be due to a memory error. Apart from this bug we did not have any problems with the Bitcoin price page.

For our Heads or Tails page testing was done by playing the game. I played through the game seeing that if I made the correct choice I gained a point and if I had made an incorrect choice then I would lose a life. I saw that when all lives were lost the score reset to 0 and the game restarted. I also saw that the feature which displayed the all time high score displayed the best score. This did however reset when I left that screen and came back. If I had more time for this module then my next steps would be to look at how I could store this best score and this information still be there when I turn the unPhone on and off. 

# Security
As for any project I had to look at security of the unPhone and our LA2 assignment. With this project there are multiple areas that require security. 

The first thing we thought about was secure communication between our device and other devices. I knew that in my code I made use of HTTPS which stands for "Hypertext Transfer Protocol Secure". This protocol is a secure version of the HTTP protocol as it has encryption built into it. This means that communication between our device and that of other networks is protected as any attacker could not make sense of the data whilst it is in transit. 

The second area we looked at was surrounding data storage and user privacy. I understood that with this Lab I did not have any personal data which is collected so this wasn't much of a problem. However, I thought it was important to note that I still considered precautions we could have put in place for data encryption on the device itself. This was however not needed for my solution. 

# Self Assessment and Conclusions
Overall I consider the LA2 assignment a success. I successfully was able to implement the Bitcoin price tracker that had a really nice user interface which is simple yet classy at the same time. I was able to adapt example code into my own project also implementing the game Heads or Tails. I would consider these two my main contributions to this assignment and believe I have met all the criteria I set out to achieve. Some things I would have worked on more if I had more time would be some way to connect the unPhone to password-protected Networks via the user interface. I also was looking at trying to implement some graphs to show price change but this would have been better to do with LVGI. I had not used this hence It was much harder for me to do. If someone were to continue my work further they should add graphs and look at the problems caused by memory and crashing of the unPhone.
